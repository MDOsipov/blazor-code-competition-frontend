@page "/users"
@attribute [Authorize(Roles = "system administrator")]

@using BlazorApplication.Components
@using BlazorApplication.Models
@using BlazorApplication.Features
@using BlazorApplication.Interfaces

@using Microsoft.Extensions.Configuration
@using System.Text.Json
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text
@inject HttpClient Http
@inject IAccessTokenProvider accessTokenProvider
@inject IConfiguration configuration
@inject IUserHttpRepository UserRepo

@if (userList is null)
{
    <span>
        <button class="btn btn-primary" type="button" disabled>
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            Loading users...
        </button>
    </span>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Email</th>
                <th scope="col">First name</th>
                <th scope="col">Last name</th>
                <th scope="col">Role</th>
                <th scope="col"></th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in userList)
            {
                <tr>
                    <td scope="row">@user.Email</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>

                    @if (ChangeMode && user.Id == CurrentUserIdToChange)
                    {
                        <div class="mb-3 row">
                            <div class="col-md-10">
                                <select class="form-select" aria-label="Choose team leader" @bind="NewRoleId">
                                    @foreach (var role in roleList)
                                    {
                                        <option value=@role.Id>@role.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <td class="align-middle">
                            <button type="button" class="btn btn-info" @onclick="()=>ChangeModeFun(user.Id)">Save role</button>
                        </td>
                    }
                    else
                    {
                        <td>@user.RoleName</td>
                        <td class="align-middle">
                            <button type="button" class="btn btn-info" @onclick="()=>ChangeModeFun(user.Id)">Change role</button>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
    <div class="row">
        <div class="col align-self-center">
            <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" />
        </div>
    </div>
}

@code {

    private IEnumerable<UserDto> userList;
    private IEnumerable<RoleDto> roleList;
    public bool ChangeMode { get; set; } = false;
    public string CurrentUserIdToChange { get; set; } = "-";
    public string NewRoleId { get; set; } = "";
    private UserParameters userParameters = new UserParameters();
    public MetaData MetaData { get; set; } = new MetaData();


    [Inject]
    public IParticipantHttpRepository participantRepo { get; set; }

    private Models.BackEndConnections _backEndConnections;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        _backEndConnections = configuration.GetSection("ConnectionStrings").Get<Models.BackEndConnections>();
        await GetUsers();
        roleList = await Http.GetFromJsonAsync<RoleDto[]>(_backEndConnections.CSharpUri + "user/allRoles");
    }

    private async System.Threading.Tasks.Task SelectedPage(int page)
    {
        userParameters.PageNumber = page;
        await GetUsers();
    }

    protected async System.Threading.Tasks.Task GetUsers()
    {
        var userPagingResponse = await UserRepo.GetUsersExtended(userParameters);
        userList = userPagingResponse.Items;
        MetaData = userPagingResponse.MetaData;
    }

    public async void ChangeModeFun(string userIdToChange)
    {
        ChangeMode = !ChangeMode;
        CurrentUserIdToChange = userIdToChange;


        if (ChangeMode)
        {
            NewRoleId = userList.Where(u => u.Id == userIdToChange).Select(u => u.RoleId).FirstOrDefault();
        }
        else
        {
            var content = JsonSerializer.Serialize(new string[] { NewRoleId } );
            var bodyContent = new StringContent(content, Encoding.UTF8, "application/json");
            var newRole = roleList.Where(r => r.Id == NewRoleId).FirstOrDefault();

            userList.Where(u => u.Id == userIdToChange).FirstOrDefault().RoleName = newRole.Name;
            userList.Where(u => u.Id == userIdToChange).FirstOrDefault().RoleId = newRole.Id;

            var putResult = await Http.PutAsync(_backEndConnections.CSharpUri + "user/assignRoles/" + userIdToChange, bodyContent);

            var putContent = await putResult.Content.ReadAsStringAsync();

            if (!putResult.IsSuccessStatusCode)
            {
                throw new ApplicationException(putContent);
            }

            if (roleList.Where(r => r.Id == NewRoleId).FirstOrDefault().Name == "participant")
            {
                var newUser = userList.Where(u => u.Id == userIdToChange).FirstOrDefault();

                ParticipantParameters participantParameters = new ParticipantParameters
                {
                    switchOff = true
                };
                var pagingResponse = await participantRepo.GetParticipantsByEmail(participantParameters, newUser.Email);
                var currentUsers = pagingResponse.Items;

                if (currentUsers.Count == 0)
                {
                    var newParticipant = new Participant()
                    {
                        id = 0,
                        firstName = newUser.FirstName is not null ? newRole.Name : "unknown",
                        lastName = newUser.LastName is not null ? newRole.Name : "unknown",
                        email = newUser.Email,
                        userId = 1,
                        teamId = 0
                    };

                    await participantRepo.CreateParticipant(newParticipant);
                }
            }
            else
            {
                var newUser = userList.Where(u => u.Id == userIdToChange).FirstOrDefault();

                ParticipantParameters participantParameters = new ParticipantParameters
                {
                    switchOff = true
                };
                var pagingResponse = await participantRepo.GetParticipantsByEmail(participantParameters, newUser.Email);
                var currentUsers = pagingResponse.Items;

                if (currentUsers.Count > 0)
                {
                    var toDeleteId = currentUsers.FirstOrDefault().id;
                    await participantRepo.DeleteParticipant(toDeleteId);
                }
            }

            StateHasChanged();
        }


    }
}