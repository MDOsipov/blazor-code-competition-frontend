@page "/users"
@attribute [Authorize(Roles = "system administrator")]

@using BlazorApplication.Components
@using BlazorApplication.Models
@using BlazorApplication.Features
@using BlazorApplication.Interfaces

@using Microsoft.Extensions.Configuration
@using System.Text.Json
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text
@inject HttpClient Http
@inject IAccessTokenProvider accessTokenProvider
@inject IConfiguration configuration
@inject IUserHttpRepository UserRepo

<ErrorBoundary @ref="errorBoundary">
    <ChildContent>
        @if (userList is null)
        {
            <p>Loading...</p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Email</th>
                        <th scope="col">First name</th>
                        <th scope="col">Last name</th>
                        <th scope="col">Role</th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in userList)
                    {
                        <tr>
                            <td scope="row">@user.Email</td>
                            <td>@user.FirstName</td>
                            <td>@user.LastName</td>

                            @if (ChangeMode && user.Id == CurrentUserIdToChange)
                            {
                                <div class="mb-3 row">
                                    <div class="col-md-10">
                                        <select class="form-select" aria-label="Choose team leader" @bind="NewRoleId">
                                            @foreach (var role in roleList)
                                            {
                                                <option value=@role.Id>@role.Name</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <td class="align-middle">
                                    <button type="button" class="btn btn-info" @onclick="()=>ChangeModeFun(user.Id)">Save role</button>
                                </td>
                            }
                            else
                            {
                                <td>@user.RoleName</td>
                                <td class="align-middle">
                                    <button type="button" class="btn btn-info" @onclick="()=>ChangeModeFun(user.Id)">Change role</button>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
            <div class="row">
                <div class="col align-self-center">
                    <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" />
                </div>
            </div>
        }
    </ChildContent>
    <ErrorContent Context="Some">
        <p class="error-message">Oops! Something went wrong while rendering user page!</p>
        <button class="btn btn-warning" @onclick="ResetError">Reset</button>
    </ErrorContent>
</ErrorBoundary>

@code {

    private IEnumerable<UserDto> userList;
    private IEnumerable<RoleDto> roleList;
    public bool ChangeMode { get; set; } = false;
    public string CurrentUserIdToChange { get; set; } = "-";
    public string NewRoleId { get; set; } = "";
    private UserParameters userParameters = new UserParameters();
    public MetaData MetaData { get; set; } = new MetaData();
    private ErrorBoundary? errorBoundary;

    [Inject]
    public IParticipantHttpRepository participantRepo { get; set; }
    [Inject]
    public ILogger<Users> Logger { get; set; }

    private Models.BackEndConnections _backEndConnections;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        _backEndConnections = configuration.GetSection("ConnectionStrings").Get<Models.BackEndConnections>();
        await GetUsers();
        await GetRoles();
    }

    private async System.Threading.Tasks.Task SelectedPage(int page)
    {
        userParameters.PageNumber = page;
        await GetUsers();
    }

    protected async System.Threading.Tasks.Task GetUsers()
    {
        Logger.LogInformation("Get users method is called");
        try
        {
            var userPagingResponse = await UserRepo.GetUsersExtended(userParameters);
            userList = userPagingResponse.Items;
            MetaData = userPagingResponse.MetaData;
            Logger.LogInformation($"Success. Users: {JsonSerializer.Serialize(userList)}");
        }
        catch(Exception ex)
        {
            Logger.LogError($"Error: {ex}");
            throw new System.Exception("Oops! Something went wrong while getting a list of users!", ex);
        }
    }

    protected async System.Threading.Tasks.Task GetRoles()
    {
        Logger.LogInformation("Get roles method is called");
        try
        {
            roleList = await Http.GetFromJsonAsync<RoleDto[]>(_backEndConnections.CSharpUri + "user/allRoles");
            Logger.LogInformation($"Success. Roles: {JsonSerializer.Serialize(roleList)}");
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error: {ex}");
            throw new System.Exception("Oops! Something went wrong while getting a list of roles!", ex);
        }
    }


    public async void ChangeModeFun(string userIdToChange)
    {
        Logger.LogInformation("Change mode method is called");
        ChangeMode = !ChangeMode;
        CurrentUserIdToChange = userIdToChange;

        if (ChangeMode)
        {
            NewRoleId = userList.Where(u => u.Id == userIdToChange).Select(u => u.RoleId).FirstOrDefault();
        }
        else
        {
            var content = JsonSerializer.Serialize(new string[] { NewRoleId } );
            var bodyContent = new StringContent(content, Encoding.UTF8, "application/json");
            var newRole = roleList.Where(r => r.Id == NewRoleId).FirstOrDefault();

            userList.Where(u => u.Id == userIdToChange).FirstOrDefault().RoleName = newRole.Name;
            userList.Where(u => u.Id == userIdToChange).FirstOrDefault().RoleId = newRole.Id;

            try
            {
                var putResult = await Http.PutAsync(_backEndConnections.CSharpUri + "user/assignRoles/" + userIdToChange, bodyContent);

                var putContent = await putResult.Content.ReadAsStringAsync();

                if (!putResult.IsSuccessStatusCode)
                {
                    throw new ApplicationException(putContent);
                }
            }
            catch(Exception ex)
            {
                Logger.LogError($"Error: {ex}");
                throw new System.Exception("Oops! Something went wrong while assigning a new role to the user!", ex);
            }


            if (roleList.Where(r => r.Id == NewRoleId).FirstOrDefault().Name == "participant")
            {
                var newUser = userList.Where(u => u.Id == userIdToChange).FirstOrDefault();

                ParticipantParameters participantParameters = new ParticipantParameters
                {
                    switchOff = true
                };

                List<Participant> currentUsers;
                try
                {
                    var pagingResponse = await participantRepo.GetParticipantsByEmail(participantParameters, newUser.Email);
                    currentUsers = pagingResponse.Items;
                }
                catch (Exception ex)
                {
                    Logger.LogError($"Error: {ex}");
                    throw new System.Exception("Oops! Something went wrong while getting a corresponding participants!", ex);
                }


                if (currentUsers.Count == 0)
                {
                    var newParticipant = new Participant()
                    {
                        id = 0,
                        firstName = newUser.FirstName is not null ? newRole.Name : "unknown",
                        lastName = newUser.LastName is not null ? newRole.Name : "unknown",
                        email = newUser.Email,
                        userId = 1,
                        teamId = 0
                    };

                    try
                    {
                        await participantRepo.CreateParticipant(newParticipant);
                        Logger.LogInformation($"Success. New participant is created");
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError($"Error: {ex}");
                        throw new System.Exception("Oops! Something went wrong while creating a new participant!", ex);
                    }
                }
            }
            else
            {
                var newUser = userList.Where(u => u.Id == userIdToChange).FirstOrDefault();

                ParticipantParameters participantParameters = new ParticipantParameters
                {
                    switchOff = true
                };

                List<Participant> currentUsers;
                try
                {
                    var pagingResponse = await participantRepo.GetParticipantsByEmail(participantParameters, newUser.Email);
                    currentUsers = pagingResponse.Items;
                }
                catch (Exception ex)
                {
                    Logger.LogError($"Error: {ex}");
                    throw new System.Exception("Oops! Something went wrong while getting corresponding participants!", ex);
                }

                if (currentUsers.Count > 0)
                {
                    var toDeleteId = currentUsers.FirstOrDefault().id;

                    try
                    {
                        await participantRepo.DeleteParticipant(toDeleteId);
                        Logger.LogInformation($"Success. The participant is deleted");
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError($"Error: {ex}");
                        throw new System.Exception("Oops! Something went wrong while deleting a user from the list of participants!", ex);
                    }
                }
            }
            StateHasChanged();
        }
    }

    protected override void OnParametersSet()
    {
        errorBoundary?.Recover();
    }
    private void ResetError()
    {
        errorBoundary?.Recover();
    }
}